#include "../lib/huffmate/src/utils/BitPackLib.huff"

/* Interface */
#define function hash(uint256,uint256) pure returns (uint256)

/* Storage Slots */
#define constant Q   = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001

// concrete constants
// pulled from the implementation
// https://extgit.iaik.tugraz.at/krypto/zkfriendlyhashzoo/-/blob/33fe9952682eca1337ac7f947b9ebe366faeda9c/plain_impls/src/reinforced_concrete/reinforced_concrete.rs
#define constant C00 = 0x215510b29c6b20e05516126a5b33016a16a92610d560c7ecbca2345dab7ae0bf
#define constant C01 = 0x07e9c9f7343a930646fbff4ce7bea19ed1938a6db7caedaa5e38f47aae527624
#define constant C02 = 0x015b1f41ec3a6e2b66530dcfc410f859243e6777cf44bb88d7db57e9018de353
#define constant C10 = 0x22c704fede5cda19337169658a93f22faad854e493a9658773d803688859aa82
#define constant C11 = 0x28c05784ecfb24064874e90f67193017fb6091ccd4ed819f1a25a9517f3c040e
#define constant C12 = 0x12bd9cae9374f5ac3ceaa747b8c5738f5e3faa3488b1e7f1b23dc9f52cab9797
#define constant C20 = 0x06fde3a5b074a23f3a643b30d5a2051e1390ea1432e9736615d416d83a7fd85f
#define constant C21 = 0x103278c9bc3b3383e99424c36dae2ccc9fcbf7181d53276bea4a47d79eaae473
#define constant C22 = 0x12b44d1037c7f6bec1507c0eb6d55fbf9a57f84904914ea7d3eb33eac23d4b1a
#define constant C30 = 0x10d954340cdcae3d7c81a1ad43e13cfc52b24eba26bbefbd4a820fede4537988
#define constant C31 = 0x1d8fb5d1ec360409e602cc2e78cd0658b667ea4c36c25e9dd3cca25196cbfa53
#define constant C32 = 0x11709df530356f7807da53bac1c8d389ef7e0a2eb94095acdd276043d07ef44f
#define constant C40 = 0x0236c4eab23cfbe95493e6a0101724602b08cb99c4bd98d7ca37c1ecbbee1148
#define constant C41 = 0x1e0474c2f00538f6a05d05dcfc43e73f88010d373b409c254631188dd0428551
#define constant C42 = 0x284536744255c64d18c36f259925ed6d3c5bb282eb574101f57e7960e37555c6
#define constant C50 = 0x0c921fa35ec9b5d7b6d47eb972f9ae13b0877f063b27c35d3af8ee36081cb19e
#define constant C51 = 0x23419e1990860e770065cd4e96a7e76c68b8198906dcd0cdb5c546b83db91eaa
#define constant C52 = 0x1b58c7c715b261cda1fbbad214d50c6ed6ea812c7d6db78ed023a77f825edc63
#define constant C60 = 0x2258c2df6c6b393d2471f2bed2e63d4b74772375424ea75e2daa36f8a2226ecd
#define constant C61 = 0x015bb2517d8872cc185aa6ca3c0d834dad5fbe288fa1c38662d5dbb95fc96988
#define constant C62 = 0x2d8cf5aa0b7c11fdb431d45897214b9332928dabd2ab1007874813d8ac431018
#define constant C70 = 0x101dcc35a6d62b54733a9854021027ac199b0fe6b73f61555203c956bb45c406
#define constant C71 = 0x0407ec9a0a155cfab1c30e6c2c2c05b0c7353167a196883a71c30fcd8f07fcf5
#define constant C72 = 0x284e315339d5e4d0a248a9ef71f9aaf6560096869b4859bdccc9b57a2bfba8a0

// bars constants
// pulled from the implementation, and compressed into 43 constants
// to fetch a value of the sbox from here, we make the trade-off for storage with extra gas
// todo: build multiplexer 
#define constant SBOX_0 = 0x017900de00f3021902060175009801b3020e01600002019a0201022102370162
#define constant SBOX_1 = 0x0195005000e90105003100f00238004a0083015d00920116014a0174002b01b0
#define constant SBOX_2 = 0x00f70247006900cb027d0133001d0255027900c60207005f0094003e00440138
#define constant SBOX_3 = 0x0268016500ea01b1009a005a00a300f90065023d01bf024b01ee00670260018a
#define constant SBOX_4 = 0x01990049013d0131015a023201060139012f0226004000660103019001ef023c
#define constant SBOX_5 = 0x00ee0028026400ec024a000f01690182008a0088006b002100be01a700b000a1
#define constant SBOX_6 = 0x01cc002300ca024d002000a001bc020501ea0203009000c3010d014c00190134
#define constant SBOX_7 = 0x00c00114026f00b4027200d901490042018801af000c01de004300e801020163
#define constant SBOX_8 = 0x005e00bf027800b5012a0001012d004f026a020b027301e401320262027b026b
#define constant SBOX_9 = 0x022001a40198009e0148003d0196012b01ba00b20271026d01f101d1023e008f
#define constant SBOX_10 = 0x003600390059014200870060025d025701d900610055008500c8005d0123020d
#define constant SBOX_11 = 0x021100ce0266013f00c401e2001100a80046006801b9009f016c025b004e0096
#define constant SBOX_12 = 0x00e60074001f02760084004501f3021400da01ec007001f901b5014d01c901c8
#define constant SBOX_13 = 0x01b7027f018e001001b4010801c200d300f1020c012600eb007e00a5020f01c4
#define constant SBOX_14 = 0x00d4009d011000d001d502630152005301460097008b025f011d0249003a000e
#define constant SBOX_15 = 0x00c1004701b801ff021e018601d6009b019d025e008e016f017300ae0005003c
#define constant SBOX_16 = 0x0121012901500172004c00d1026e01c50101022b002c01ae0159014f022401cb
#define constant SBOX_17 = 0x002f01aa024f022f01a1011c022800890115011901cf0277015e01090143006c
#define constant SBOX_18 = 0x012200a9027a0261019e0082000600a6013c00cf02500118018701120014012c
#define constant SBOX_19 = 0x025102250003025a01a201d801a301280029002e0267027e01840229011a0164
#define constant SBOX_20 = 0x014701ce007301450079018f0111014e017f01e8012400370274000900130259
#define constant SBOX_21 = 0x01f000e400c902400176022e009900a201550161005400dc01cd00dd02230158
#define constant SBOX_22 = 0x01fb0241008c01e501d7000b00af000d0035021f010e0078001e024801800170
#define constant SBOX_23 = 0x018d00ef000401e3026c00bd020a021c01fe009500f50215011b01000171012e
#define constant SBOX_24 = 0x023b008000fd01c001be00b7006301b601d4002a025201e70193001700ac0154
#define constant SBOX_25 = 0x006a01e100fb016b012701e901da01510057005600f600d70178013b019f0075
#define constant SBOX_26 = 0x011e025800380091005b016601ad019b0204013600d50256000a018b006f01fa
#define constant SBOX_27 = 0x00ed00aa0200005200930243019201f50157002601b200d6013a0168004d0235
#define constant SBOX_28 = 0x01400181019400c7014b015f01d20254016d00e701dd025c00fe010c021b01a8
#define constant SBOX_29 = 0x00a7017a01eb0217008d010b00b1001b022200db022c00d801c30183001c0032
#define constant SBOX_30 = 0x023900ff0120009c01c1017b01fc0210021302700245022a003b00ab00fc0000
#define constant SBOX_31 = 0x025300b900330208023f01db007100bb00c201ac01f4026900bc014100b30107
#define constant SBOX_32 = 0x006e01d300120191001600a401560015017e017d007f0034023a002d01bd0024
#define constant SBOX_33 = 0x021601530062012500f4010a027500e5007a007b0030005800e100ad00640072
#define constant SBOX_34 = 0x0218027c00cd002201a901f602020130026502120076004b02310246005101e0
#define constant SBOX_35 = 0x005c01f201d000e001df023300df0280020901ab01f700fa017700ba004800f2
#define constant SBOX_36 = 0x007d017c010f00cc0197016e00c50077000701ed001a006d00410167018c0137
#define constant SBOX_37 = 0x013501ca00860189022d01dc014401a5011300250027024400b80230000801c7
#define constant SBOX_38 = 0x01fd01a60018011f024e00b601a0013e0104024201c6018500810236003f01e6
#define constant SBOX_39 = 0x021d016a00d20227015c0117021a015b01f8007c023401bb019c00e200e300f8
#define constant SBOX_40 = 0x024c028102820283028402850286028702880289028a028b028c028d028e028f
#define constant SBOX_41 = 0x0290029102920293029402950296029702980299029a029b029c029d029e029f
#define constant SBOX_42 = 0x02a002a102a202a302a402a502a602a702a802a902aa00000000000000000000

#define constant SI_0  = 0x2a1
#define constant SI_1  = 0x2a6
#define constant SI_2  = 0x29b
#define constant SI_3  = 0x2ab
#define constant SI_4  = 0x2a8
#define constant SI_5  = 0x28f
#define constant SI_6  = 0x2ab
#define constant SI_7  = 0x2ab
#define constant SI_8  = 0x2a9
#define constant SI_9  = 0x2ab
#define constant SI_10 = 0x2a3
#define constant SI_11 = 0x29c
#define constant SI_12 = 0x2a3
#define constant SI_13 = 0x2a5
#define constant SI_14 = 0x2a8
#define constant SI_15 = 0x2a9
#define constant SI_16 = 0x29d
#define constant SI_17 = 0x2ab
#define constant SI_18 = 0x2a9
#define constant SI_19 = 0x2a5
#define constant SI_20 = 0x29c
#define constant SI_21 = 0x28e
#define constant SI_22 = 0x297
#define constant SI_23 = 0x29a
#define constant SI_24 = 0x290
#define constant SI_25 = 0x292
#define constant SI_26 = 0x28b

#define constant DIVISOR_0  = 0xa84
#define constant DIVISOR_1  = 0xa98
#define constant DIVISOR_2  = 0xa6c
#define constant DIVISOR_3  = 0xaac
#define constant DIVISOR_4  = 0xaa0
#define constant DIVISOR_5  = 0xa3c
#define constant DIVISOR_6  = 0xaac
#define constant DIVISOR_7  = 0xaac
#define constant DIVISOR_8  = 0xaa4
#define constant DIVISOR_9  = 0xaac
#define constant DIVISOR_10 = 0xa8c
#define constant DIVISOR_11 = 0xa70
#define constant DIVISOR_12 = 0xa8c
#define constant DIVISOR_13 = 0xa94
#define constant DIVISOR_14 = 0xaa0
#define constant DIVISOR_15 = 0xaa4
#define constant DIVISOR_16 = 0xa74
#define constant DIVISOR_17 = 0xaac
#define constant DIVISOR_18 = 0xaa4
#define constant DIVISOR_19 = 0xa94
#define constant DIVISOR_20 = 0xa70
#define constant DIVISOR_21 = 0xa38
#define constant DIVISOR_22 = 0xa5c
#define constant DIVISOR_23 = 0xa68
#define constant DIVISOR_24 = 0xa40
#define constant DIVISOR_25 = 0xa48
#define constant DIVISOR_26 = 0xa2c

/* Methods */
#define macro CONCRETE(CONST_A, CONST_B, CONST_C) = takes (3) returns (3) {
    // this macro takes the top 3 elements from the stack
    // i.e the state, s0, s1, and s2
    // and performs operations on them as defined in
    // the concrete specification
    // input stack: [s0, s1, s2]
    // first set s0 as sum
    // sum = s0 + s1 + s2
    [Q] dup2 dup4 addmod // [sum', s0, s1, s2]
    [Q] swap1 dup5 addmod // [sum, s0, s1, s2] 
    // now iterate thru all elements,
    // adding sum to all elements
    // s0 = s0 + sum + CONST_A
    // s1 = s1 + sum + CONST_B
    // s2 = s2 + sum + CONST_C
    [Q] dup2 dup4 addmod // [s0', sum, s0, s1, s2]
    [Q] swap1 <CONST_A> addmod // [s0'', sum, s0, s1, s2]
    swap2 pop // [sum, s0'', s1, s2]
    [Q] dup4 dup3 addmod // [s1', sum, s0'', s1, s2]
    [Q] swap1 <CONST_B> addmod // [s1'', sum, s0'', s1, s2]
    swap3 pop // [sum, s0'', s1'', s2]
    [Q] dup5 dup3 addmod // [s2', sum, s0'', s1'', s2]
    [Q] swap1 <CONST_C> addmod // [s2'', sum, s0'', s1'', s2]
    swap4 pop pop // [s0'', s1'', s2'']
}

#define macro BRICKS() = takes(3) returns(3) {
    // s0 = s0 * s0 * s0 * s0
    // s1 = s1 * s1 + (alphas[0].count(s0) + betas[0] ) * s1
    // s2 =  (alphas[1].count(s1) + betas[1]) * s1

    // input stack: [s0, s1, s2]
    // s0 = s0 * s0 * s0 * s0
    // first compute squares of s0 and s1
    [Q] dup2 dup3 mulmod // [s0', s0, s1, s2]
    [Q] dup4 dup5 mulmod // [s1', s0', s0, s1, s2]
    swap1 // [s0', s1', s0, s1, s2]

    // compute new s0
    [Q] dup2 dup3 mulmod // [s0'', s0', s1', s0, s1, s2]
    [Q] swap1 dup5 mulmod // [s0_out, s0', s1', s0, s1, s2]

    // compute new s1
    swap1 dup4 [Q] swap2 addmod // [s1', s0_out, s1', s0, s1, s2]
    0x02 [Q] swap2 addmod // [s1'', s0_out, s1', s0, s1, s2]
    dup5 [Q] swap2 mulmod // [s1_out, s0_out, s1', s0, s1, s2]

    // compute new s2
    // add s1 3 times to s1' 
    // s1' = s1' + s1 + s1 + s1 + beta
    swap2 dup5 [Q] swap2 addmod // [s1'', s0_out, s1_out, s0, s1, s2]
    dup5 [Q] swap2 addmod // [s1''', s0_out, s1_out, s0, s1, s2]
    dup5 [Q] swap2 addmod // [s1'''', s0_out, s1_out, s0, s1, s2]
    0x04 [Q] swap2 addmod // [s1''''', s0_out, s1_out, s0, s1, s2]
    dup6 [Q] swap2 mulmod // [s2_out, s0_out, s1_out, s0, s1, s2] 
    swap5 pop swap2 pop swap2 pop // [s0_out, s1_out, s2_out]
}

#define macro DECOMPOSE(DIVISOR) = takes(1) returns(2) {
    // input stack: [element]
    // output stack: [quotient, remainder]
    0x02 shl // [shifted_element]
    <DIVISOR> dup1 dup3 div // [quotient, divisor, shifted_element]
    swap2 mod swap1 // [quotient, remainder]
    swap1 0x02 shr swap1 // [quotient, remainder]
}

#define macro MUL_AND_ADD(SI_I) = takes(2) returns (1) {
    <SI_I> mul add // [sbox_value * si_i + remainder_i]
}

#define macro COMPOSE() = takes(27) returns(1) {
    // res = (iterative_val * si_i) + remainder_i from 1..26 
    // input stack: [iterative_val, remainder_1, remainder_2, ... remainder_26]
    // output stack: [res]
    MUL_AND_ADD(SI_1) MUL_AND_ADD(SI_2) MUL_AND_ADD(SI_3) MUL_AND_ADD(SI_4) 
    MUL_AND_ADD(SI_5) MUL_AND_ADD(SI_6) MUL_AND_ADD(SI_7) MUL_AND_ADD(SI_8) 
    MUL_AND_ADD(SI_9) MUL_AND_ADD(SI_10) MUL_AND_ADD(SI_11) MUL_AND_ADD(SI_12) 
    MUL_AND_ADD(SI_13) MUL_AND_ADD(SI_14) MUL_AND_ADD(SI_15) MUL_AND_ADD(SI_16) 
    MUL_AND_ADD(SI_17) MUL_AND_ADD(SI_18) MUL_AND_ADD(SI_19) MUL_AND_ADD(SI_20) 
    MUL_AND_ADD(SI_21) MUL_AND_ADD(SI_22) MUL_AND_ADD(SI_23) MUL_AND_ADD(SI_24) 
    MUL_AND_ADD(SI_25) MUL_AND_ADD(SI_26)
}

#define macro GET_SBOX_VALUE() = takes(1) returns (1) {
    // input stack: [sbox_compressed, index_in_compressed_sbox]
    swap1 0x10 // [0x10, index_in_compressed_sbox, sbox_compressed]
    UNPACK_FROM_CENTER() // [sbox_value]
}

#define jumptable SBOX_TABLE {
    found_compressed_sbox_index_0 found_compressed_sbox_index_1 found_compressed_sbox_index_2 found_compressed_sbox_index_3 found_compressed_sbox_index_4
    found_compressed_sbox_index_5 found_compressed_sbox_index_6 found_compressed_sbox_index_7 found_compressed_sbox_index_8 found_compressed_sbox_index_9
    found_compressed_sbox_index_a found_compressed_sbox_index_b found_compressed_sbox_index_c found_compressed_sbox_index_d found_compressed_sbox_index_e
    found_compressed_sbox_index_f found_compressed_sbox_index_10 found_compressed_sbox_index_11 found_compressed_sbox_index_12 found_compressed_sbox_index_13
    found_compressed_sbox_index_14 found_compressed_sbox_index_15 found_compressed_sbox_index_16 found_compressed_sbox_index_17 found_compressed_sbox_index_18
    found_compressed_sbox_index_19 found_compressed_sbox_index_1a found_compressed_sbox_index_1b found_compressed_sbox_index_1c found_compressed_sbox_index_1d
    found_compressed_sbox_index_1e found_compressed_sbox_index_1f found_compressed_sbox_index_20 found_compressed_sbox_index_21 found_compressed_sbox_index_22
    found_compressed_sbox_index_23 found_compressed_sbox_index_24 found_compressed_sbox_index_25 found_compressed_sbox_index_26 found_compressed_sbox_index_27
    found_compressed_sbox_index_28 found_compressed_sbox_index_29 found_compressed_sbox_index_2a
}

#define fn SBOX() = takes(1) returns(1) {
    // get sbox value from index provided by top element
    // of stack
    // use jumptable to get the correct sbox
    dup1 0x10 swap1 div // [index_of_compressed_sbox, index]
    swap1 0x10 swap1 mod 0x10 mul // [index_in_compressed_sbox, index_of_compressed_sbox]
    swap1 // [index_of_compressed_sbox, index_in_compressed_sbox]
   
    0x20 mul // [pc, index_in_compressed_sbox]
    mload jump

    // input stack: [index_in_compressed_sbox]
    found_compressed_sbox_index_0:
        [SBOX_0]
        cont jump

    found_compressed_sbox_index_1:
        [SBOX_1]
        cont jump

    found_compressed_sbox_index_2:
        [SBOX_2]
        cont jump

    found_compressed_sbox_index_3:
        [SBOX_3]
        cont jump

    found_compressed_sbox_index_4:
        [SBOX_4]
        cont jump

    found_compressed_sbox_index_5:
        [SBOX_5]
        cont jump

    found_compressed_sbox_index_6:
        [SBOX_6]
        cont jump

    found_compressed_sbox_index_7:
        [SBOX_7]
        cont jump

    found_compressed_sbox_index_8:
        [SBOX_8]
        cont jump

    found_compressed_sbox_index_9:
        [SBOX_9]
        cont jump

    found_compressed_sbox_index_a:
        [SBOX_10]
        cont jump

    found_compressed_sbox_index_b:
        [SBOX_11]
        cont jump

    found_compressed_sbox_index_c:
        [SBOX_12]
        cont jump

    found_compressed_sbox_index_d:
        [SBOX_13]
        cont jump

    found_compressed_sbox_index_e:
        [SBOX_14]
        cont jump

    found_compressed_sbox_index_f:
        [SBOX_15]
        cont jump

    found_compressed_sbox_index_10:
        [SBOX_16]
        cont jump

    found_compressed_sbox_index_11:
        [SBOX_17]
        cont jump

    found_compressed_sbox_index_12:
        [SBOX_18]
        cont jump

    found_compressed_sbox_index_13:
        [SBOX_19]
        cont jump

    found_compressed_sbox_index_14:
        [SBOX_20]
        cont jump

    found_compressed_sbox_index_15:
        [SBOX_21]
        cont jump

    found_compressed_sbox_index_16:
        [SBOX_22]
        cont jump

    found_compressed_sbox_index_17:
        [SBOX_23]
        cont jump

    found_compressed_sbox_index_18:
        [SBOX_24]
        cont jump

    found_compressed_sbox_index_19:
        [SBOX_25]
        cont jump

    found_compressed_sbox_index_1a:
        [SBOX_26]
        cont jump

    found_compressed_sbox_index_1b:
        [SBOX_27]
        cont jump

    found_compressed_sbox_index_1c:
        [SBOX_28]
        cont jump

    found_compressed_sbox_index_1d:
        [SBOX_29]
        cont jump

    found_compressed_sbox_index_1e:
        [SBOX_30]
        cont jump

    found_compressed_sbox_index_1f:
        [SBOX_31]
        cont jump

    found_compressed_sbox_index_20:
        [SBOX_32]
        cont jump

    found_compressed_sbox_index_21:
        [SBOX_33]
        cont jump

    found_compressed_sbox_index_22:
        [SBOX_34]
        cont jump

    found_compressed_sbox_index_23:
        [SBOX_35]
        cont jump

    found_compressed_sbox_index_24:
        [SBOX_36]
        cont jump

    found_compressed_sbox_index_25:
        [SBOX_37]
        cont jump

    found_compressed_sbox_index_26:
        [SBOX_38]
        cont jump

    found_compressed_sbox_index_27:
        [SBOX_39]
        cont jump

    found_compressed_sbox_index_28:
        [SBOX_40]
        cont jump

    found_compressed_sbox_index_29:
        [SBOX_41]
        cont jump

    found_compressed_sbox_index_2a:
        [SBOX_42]
        cont jump

    push0 push0 revert

    cont:
        // input stack: [sbox_compressed, index_in_compressed_sbox]
        GET_SBOX_VALUE() // [sbox_value]
}

#define macro DECOMPOSE_AND_SBOX(DIVISOR) = takes(1) returns (1) {
    DECOMPOSE(<DIVISOR>) swap1 SBOX() swap1 // [quotient, sboxed]
}

#define macro BARS_ELEMENT() = takes(1) returns (1) {
    // input stack: [s0]
    DECOMPOSE_AND_SBOX(DIVISOR_26) DECOMPOSE_AND_SBOX(DIVISOR_25) DECOMPOSE_AND_SBOX(DIVISOR_24)
    DECOMPOSE_AND_SBOX(DIVISOR_23) DECOMPOSE_AND_SBOX(DIVISOR_22) DECOMPOSE_AND_SBOX(DIVISOR_21)
    DECOMPOSE_AND_SBOX(DIVISOR_20) DECOMPOSE_AND_SBOX(DIVISOR_19) DECOMPOSE_AND_SBOX(DIVISOR_18)
    DECOMPOSE_AND_SBOX(DIVISOR_17) DECOMPOSE_AND_SBOX(DIVISOR_16) DECOMPOSE_AND_SBOX(DIVISOR_15)
    DECOMPOSE_AND_SBOX(DIVISOR_14) DECOMPOSE_AND_SBOX(DIVISOR_13) DECOMPOSE_AND_SBOX(DIVISOR_12)
    DECOMPOSE_AND_SBOX(DIVISOR_11) DECOMPOSE_AND_SBOX(DIVISOR_10) DECOMPOSE_AND_SBOX(DIVISOR_9)
    DECOMPOSE_AND_SBOX(DIVISOR_8) DECOMPOSE_AND_SBOX(DIVISOR_7) DECOMPOSE_AND_SBOX(DIVISOR_6)
    DECOMPOSE_AND_SBOX(DIVISOR_5) DECOMPOSE_AND_SBOX(DIVISOR_4) DECOMPOSE_AND_SBOX(DIVISOR_3)
    DECOMPOSE_AND_SBOX(DIVISOR_2) DECOMPOSE_AND_SBOX(DIVISOR_1) SBOX() // just sbox the last element since its decomposed

    // now we have the sboxed values, we need to compose them
    COMPOSE()
}

#define macro BARS() = takes(3) returns(3) {
    // for s0, s1 and s2,
    // we need to decompose 
    // and compose the elements

    // input stack: [s0, s1, s2]
    BARS_ELEMENT() // [s0_composed, s1, s2]
    swap1 // [s1, s0_composed, s2]

    BARS_ELEMENT() // [s1_composed, s0_composed, s2]
    swap2 // [s2, s0_composed, s1_composed]

    BARS_ELEMENT() // [s2_composed, s0_composed, s1_composed]
    swap2 swap1 // [s0_composed, s1_composed, s2_composed]
}

#define macro MAIN() = takes(0) returns(0) {
    __tablesize(SBOX_TABLE)   // [table_size]
    __tablestart(SBOX_TABLE)  // [table_start, table_size]
    0x00
    codecopy

    push0 // [0]
    0x24 calldataload // [s1, 0]
    0x04 calldataload // [s0, s1, 0]

    CONCRETE(C00, C01, C02) // [s0, s1, s2]

    // first rounds 
    BRICKS()
    CONCRETE(C10, C11, C12)
    BRICKS()
    CONCRETE(C20, C21, C22)
    BRICKS()
    CONCRETE(C30, C31, C32)

    // // middle rounds <not implemented fully>
    BARS()
    CONCRETE(C40, C41, C42)

    // last rounds <not implemented>
    BRICKS()
    CONCRETE(C50, C51, C52)
    BRICKS()
    CONCRETE(C60, C61, C62)
    BRICKS()
    // we can just run concrete for s0 for the last round
    [Q] dup2 dup4 addmod
    [Q] swap1 dup5 addmod 
    [Q] dup2 dup4 addmod 
    [Q] swap1 [C70] addmod

    push0 mstore
    0x20 push0 return
}